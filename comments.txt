Привет, Максим!

Спасибо за разбор, было интересно.

Далее, по комментариям:

    1. Не совсем понятно, а с какой целью делать новую таблицу f_sales? Можно ведь добавить колонку status

Это я описывал в task1.md - всё из-за обратной совместимости. Посчитал, что добавление новой колонки изменит старую модель, таким образом, нарушив обратную совместимость.
Учёл твой комментарий, поправил. Теперь это одна таблица.

    2. Здесь все отлично, но стоит добавить уникальный ключ для сочетания period_id + item_id
    И код создания таблицы и ее наполнения стоит разделить на скрипты

Перенёс блок создания таблицы в migrations. Хотел так сделать изначально, но, уже не помню, по какой причине, решил оставить в скрипте, который дергает Airflow
Также в migrations добавил уникальный ключ для таблицы f_customer_retention.

    3. Здесь у нас очень важный момент, заполнение витрины - это часть ETL процесса в рамках дага. Т. е. она должна заполняться инкрементально и без дублирования данных.

Спасибо, что подсветил, действительно, упустил это.
Добавил блок, удаляющий данные за текущую неделю перед инсертом.
Не совсем понял комментарий про {{ds}}. Нам нужен срез по неделям, с появлением новых данных запрос будет удалять текущие данные за нужную неделю и инсертить вместе с новыми данными. Зачем инсертить только данные за конкретный день?

    4. Это необязательное исправление, но идемпотентность не соблюдается. Рекомендую добавить условие для ее соблюдения, ведь это одна из наиболее важный частей использования Airflow и вообще сути ETL процесса
    Тут просто нужно перед записью удалить данные за тот день ({{ds}}), за который их вставляешь

Исправил

    5. Но CTE для этого не нужна, просто CASE в запрос надо вставить, этого достаточно:)

Не согласен с этим замечанием. В случае с CTE, запрос отрабатывает на 30% быстрее:

EXPLAIN ANALYZE WITH revenue AS (
	SELECT
		CASE
			WHEN status = 'shipped' THEN payment_amount
			WHEN status = 'refunded' THEN -payment_amount
		END AS payment_amount, uniq_id
	FROM staging.user_order_log uol
);
SELECT dc.date_id, uol.item_id, uol.customer_id, city_id, quantity, rev.payment_amount, status
FROM staging.user_order_log uol
	--INNER JOIN revenue rev ON uol.uniq_id = rev.uniq_id
	LEFT JOIN mart.d_calendar AS dc ON uol.date_time::Date = dc.date_actual;

--Execution Time: 4.681 ms

EXPLAIN ANALYZE SELECT dc.date_id, uol.item_id, uol.customer_id, city_id, quantity, --rev.payment_amount, status
			CASE
				WHEN status = 'shipped' THEN payment_amount
				WHEN status = 'refunded' THEN -payment_amount
		END AS payment_amount, status
FROM staging.user_order_log uol
	LEFT JOIN mart.d_calendar AS dc ON uol.date_time::Date = dc.date_actual;

--Execution Time: 6.757 ms

    5. По комментариям по ДАГу - ДАГ был готов сразу, не стал его менять. Спасибо, учёл все комментарии.
